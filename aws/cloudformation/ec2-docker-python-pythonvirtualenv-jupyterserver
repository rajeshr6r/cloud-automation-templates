AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to launch EC2 instance with Docker, Git, Python virtual environment, Jupyter server with password pre-installed, auto-start on reboot, and a 40 GB EBS volume'

Resources:
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't3.xlarge'
      ImageId: 'ami-03b08518e08976a71'  # Ubuntu Server 20.04 LTS in us-east-1 (replace with appropriate AMI ID for your region)
      KeyName: 'llm_sandbox'           # Specify your EC2 Key Pair name here
      SecurityGroupIds:
        - Ref: 'InstanceSecurityGroup'
      BlockDeviceMappings:
        - DeviceName: '/dev/sdf'
          Ebs:
            VolumeSize: 40   # 40 GB EBS volume
            VolumeType: 'gp2' # General Purpose SSD volume type
      UserData:
        Fn::Base64: |
          #!/bin/bash
          # Update the system
          apt-get update -y

          # Install Docker and Git
          apt-get install -y docker.io git

          # Start and enable Docker
          systemctl start docker
          systemctl enable docker
          docker --version
          git --version

          # Install Python 3, pip, and virtualenv
          sudo apt-get install -y python3 python3-pip
          pip3 install virtualenv

          # Create a Python virtual environment
          mkdir /home/ubuntu/llmenv
          cd /home/ubuntu/llmenv
          virtualenv venv

          # Activate virtual environment and install Jupyter server
          source /home/ubuntu/llmenv/venv/bin/activate
          pip3 install --upgrade pip
          pip3 install jupyter

          # Set a password for Jupyter Notebook server
          jupyter_password="enter your password here"  # Replace with your desired password
          jupyter_notebook_config="/home/ubuntu/.jupyter/jupyter_notebook_config.py"

          # Generate a hashed password for Jupyter Notebook
          python3 -c "from jupyter_server.auth import passwd; print(passwd('${jupyter_password}'))" > /home/ubuntu/jupyter_hash.txt

          # Ensure the user has proper permissions to modify the Jupyter config file
          mkdir -p /home/ubuntu/.jupyter
          sudo chown -R ubuntu:ubuntu /home/ubuntu/.jupyter

          # Add the password hash to the Jupyter config file with sudo to ensure proper permissions
          echo "c.NotebookApp.password = u'$(cat /home/ubuntu/jupyter_hash.txt)'" | sudo tee -a $jupyter_notebook_config

          # Clean up the temporary password hash file
          rm /home/ubuntu/jupyter_hash.txt

          # Create systemd service for Jupyter notebook to start on reboot
          cat <<EOT | sudo tee /etc/systemd/system/jupyter.service
          [Unit]
          Description=Jupyter Notebook
          After=network.target

          [Service]
          Type=simple
          PIDFile=/run/jupyter.pid
          ExecStart=/home/ubuntu/myenv/venv/bin/jupyter-notebook --config=/home/ubuntu/.jupyter/jupyter_notebook_config.py --ip=0.0.0.0 --port=8888 --no-browser --allow-root
          User=ubuntu
          WorkingDirectory=/home/ubuntu
          Restart=always

          [Install]
          WantedBy=multi-user.target
          EOT

          # Reload systemd and enable the Jupyter service to start on boot
          sudo systemctl daemon-reload
          sudo systemctl enable jupyter.service
          sudo systemctl start jupyter.service

          # Output the Jupyter URL
          echo "Jupyter notebook is running at http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):8888"

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow SSH and HTTP inbound traffic'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'  # Allowing SSH from any IP (adjust to be more secure if needed)
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'  # Allowing HTTP traffic from any IP (adjust to be more secure if needed)
        - IpProtocol: 'tcp'
          FromPort: '8888'
          ToPort: '8888'
          CidrIp: '0.0.0.0/0'  # Allowing Jupyter server access on port 8888 (adjust to be more secure if needed)

Outputs:
  InstanceId:
    Description: 'The Instance ID of the EC2 instance'
    Value: !Ref EC2Instance
  PublicIP:
    Description: 'The public IP of the EC2 instance'
    Value: !GetAtt EC2Instance.PublicIp
  JupyterURL:
    Description: 'URL to access Jupyter Notebook'
    Value: !Sub 'http://${EC2Instance.PublicIp}:8888/lab'
